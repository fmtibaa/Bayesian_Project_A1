
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace spt_lm_no_delta_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 166> locations_array__ = 
{" (found before start of program)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 30, column 4 to column 30)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 31, column 4 to column 27)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 32, column 4 to column 34)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 33, column 4 to column 47)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 34, column 4 to column 27)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 35, column 4 to column 41)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 37, column 4 to column 26)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 38, column 4 to column 28)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 39, column 4 to column 30)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 43, column 4 to column 44)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 44, column 4 to column 46)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 47, column 12 to column 68)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 48, column 12 to column 74)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 46, column 31 to line 49, column 9)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 46, column 8 to line 49, column 9)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 45, column 27 to line 50, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 45, column 4 to line 50, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 82, column 4 to column 55)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 84, column 4 to column 67)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 85, column 4 to column 83)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 86, column 4 to column 93)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 87, column 4 to column 78)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 90, column 4 to column 58)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 93, column 8 to column 69)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 92, column 29 to line 94, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 92, column 6 to line 94, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 91, column 35 to line 95, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 91, column 4 to line 95, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 98, column 4 to column 56)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 101, column 8 to column 65)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 100, column 29 to line 102, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 100, column 6 to line 102, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 99, column 35 to line 103, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 99, column 4 to line 103, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 106, column 4 to column 51)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 107, column 4 to column 43)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 110, column 4 to column 49)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 111, column 4 to column 39)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 116, column 8 to column 186)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 115, column 37 to line 117, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 115, column 6 to line 117, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 114, column 32 to line 118, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 114, column 4 to line 118, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 122, column 6 to column 68)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 124, column 8 to column 177)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 123, column 45 to line 125, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 123, column 6 to line 125, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 121, column 32 to line 126, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 121, column 4 to line 126, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 130, column 8 to column 62)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 132, column 10 to column 100)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 133, column 10 to column 111)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 134, column 10 to column 185)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 135, column 10 to column 36)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 136, column 10 to column 67)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 131, column 47 to line 137, column 9)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 131, column 8 to line 137, column 9)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 129, column 37 to line 138, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 129, column 6 to line 138, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 128, column 32 to line 139, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 128, column 4 to line 139, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 145, column 10 to column 106)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 144, column 39 to line 146, column 9)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 144, column 8 to line 146, column 9)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 143, column 34 to line 147, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 143, column 6 to line 147, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 142, column 32 to line 148, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 142, column 4 to line 148, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 54, column 11 to column 21)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 54, column 4 to column 55)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 55, column 4 to column 22)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 56, column 4 to column 23)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 57, column 4 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 58, column 4 to column 26)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 59, column 4 to column 28)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 60, column 4 to column 30)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 61, column 4 to column 22)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 65, column 8 to column 60)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 64, column 26 to line 66, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 64, column 6 to line 66, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 63, column 24 to line 67, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 63, column 4 to line 67, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 70, column 6 to column 59)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 69, column 24 to line 71, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 69, column 4 to line 71, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 74, column 6 to column 88)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 76, column 8 to column 143)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 75, column 26 to line 77, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 75, column 6 to line 77, column 7)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 73, column 25 to line 78, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 73, column 4 to line 78, column 5)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 3, column 4 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 4, column 4 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 5, column 4 to column 28)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 6, column 4 to column 30)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 8, column 4 to column 33)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 9, column 4 to column 33)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 10, column 4 to column 36)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 12, column 10 to column 17)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 12, column 18 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 12, column 26 to column 36)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 12, column 4 to column 45)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 13, column 10 to column 17)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 13, column 18 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 13, column 34 to column 44)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 13, column 45 to column 57)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 13, column 4 to column 65)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 14, column 11 to column 21)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 14, column 22 to column 32)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 14, column 4 to column 39)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 16, column 11 to column 29)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 16, column 31 to column 41)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 16, column 4 to column 53)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 17, column 11 to column 29)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 17, column 31 to column 49)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 17, column 4 to column 69)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 18, column 11 to column 26)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 18, column 4 to column 42)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 19, column 10 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 19, column 26 to column 52)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 19, column 61 to column 71)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 19, column 72 to column 84)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 19, column 4 to column 103)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 20, column 10 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 20, column 26 to column 52)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 20, column 61 to column 79)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 20, column 80 to column 92)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 20, column 4 to column 113)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 22, column 4 to column 20)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 23, column 4 to column 20)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 24, column 4 to column 21)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 25, column 4 to column 33)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 26, column 4 to column 31)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 31, column 10 to column 17)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 32, column 10 to column 22)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 33, column 10 to column 17)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 33, column 18 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 33, column 26 to column 36)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 34, column 10 to column 17)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 35, column 10 to column 17)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 35, column 18 to column 28)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 43, column 11 to column 21)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 43, column 22 to column 32)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 44, column 11 to column 21)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 44, column 22 to column 32)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 82, column 11 to column 21)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 84, column 10 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 84, column 27 to column 45)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 85, column 10 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 85, column 26 to column 52)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 85, column 53 to column 63)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 86, column 10 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 86, column 26 to column 52)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 86, column 53 to column 71)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 87, column 10 to column 25)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 87, column 26 to column 41)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 87, column 42 to column 60)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 90, column 11 to column 29)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 90, column 31 to column 41)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 98, column 11 to column 29)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 98, column 31 to column 41)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 106, column 11 to column 21)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 106, column 23 to column 33)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 110, column 11 to column 21)",
 " (in 'C:/Users/nb23N/Documents/Bayesian_Project_A1/Bayesian_Project_A1/stan/spt_lm_no_delta.stan', line 110, column 23 to column 33)"};




class spt_lm_no_delta_model final : public model_base_crtp<spt_lm_no_delta_model> {

 private:
  int N_years;
  int N_weeks;
  int N_stations;
  int N_covariates;
  int N_years_to_pred;
  int N_weeks_to_pred;
  int N_stations_to_pred;
  std::vector<std::vector<std::vector<double>>> y;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> delta;
  Eigen::Matrix<double, -1, -1> dist_data__;
  Eigen::Matrix<double, -1, -1> dist_pred_data__;
  Eigen::Matrix<double, -1, -1> dist_pred_to_pred_data__;
  Eigen::Matrix<double, -1, 1> weeks_to_pred_data__;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> delta_pred_sim_t;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> delta_pred_sim_s_t;
  double a;
  double b;
  double s0;
  double phi_gamma_esti;
  double phi_eta_esti;
  int o_pred_sim_t_2dim__;
  int o_pred_sim_s_t_2dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> dist{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> dist_pred{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> dist_pred_to_pred{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> weeks_to_pred{nullptr, 0};
 
 public:
  ~spt_lm_no_delta_model() { }
  
  inline std::string model_name() const final { return "spt_lm_no_delta_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = --filename-in-msg=spt_lm_no_delta.stan"};
  }
  
  
  spt_lm_no_delta_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "spt_lm_no_delta_model_namespace::spt_lm_no_delta_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 92;
      context__.validate_dims("data initialization","N_years","int",
           std::vector<size_t>{});
      N_years = std::numeric_limits<int>::min();
      
      
      current_statement__ = 92;
      N_years = context__.vals_i("N_years")[(1 - 1)];
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "N_years", N_years, 0);
      current_statement__ = 93;
      context__.validate_dims("data initialization","N_weeks","int",
           std::vector<size_t>{});
      N_weeks = std::numeric_limits<int>::min();
      
      
      current_statement__ = 93;
      N_weeks = context__.vals_i("N_weeks")[(1 - 1)];
      current_statement__ = 93;
      stan::math::check_greater_or_equal(function__, "N_weeks", N_weeks, 0);
      current_statement__ = 94;
      context__.validate_dims("data initialization","N_stations","int",
           std::vector<size_t>{});
      N_stations = std::numeric_limits<int>::min();
      
      
      current_statement__ = 94;
      N_stations = context__.vals_i("N_stations")[(1 - 1)];
      current_statement__ = 94;
      stan::math::check_greater_or_equal(function__, "N_stations",
                                            N_stations, 0);
      current_statement__ = 95;
      context__.validate_dims("data initialization","N_covariates","int",
           std::vector<size_t>{});
      N_covariates = std::numeric_limits<int>::min();
      
      
      current_statement__ = 95;
      N_covariates = context__.vals_i("N_covariates")[(1 - 1)];
      current_statement__ = 95;
      stan::math::check_greater_or_equal(function__, "N_covariates",
                                            N_covariates, 0);
      current_statement__ = 96;
      context__.validate_dims("data initialization","N_years_to_pred","int",
           std::vector<size_t>{});
      N_years_to_pred = std::numeric_limits<int>::min();
      
      
      current_statement__ = 96;
      N_years_to_pred = context__.vals_i("N_years_to_pred")[(1 - 1)];
      current_statement__ = 96;
      stan::math::check_greater_or_equal(function__, "N_years_to_pred",
                                            N_years_to_pred, 0);
      current_statement__ = 97;
      context__.validate_dims("data initialization","N_weeks_to_pred","int",
           std::vector<size_t>{});
      N_weeks_to_pred = std::numeric_limits<int>::min();
      
      
      current_statement__ = 97;
      N_weeks_to_pred = context__.vals_i("N_weeks_to_pred")[(1 - 1)];
      current_statement__ = 97;
      stan::math::check_greater_or_equal(function__, "N_weeks_to_pred",
                                            N_weeks_to_pred, 0);
      current_statement__ = 98;
      context__.validate_dims("data initialization","N_stations_to_pred",
          "int", std::vector<size_t>{});
      N_stations_to_pred = std::numeric_limits<int>::min();
      
      
      current_statement__ = 98;
      N_stations_to_pred = context__.vals_i("N_stations_to_pred")[(1 - 1)];
      current_statement__ = 98;
      stan::math::check_greater_or_equal(function__, "N_stations_to_pred",
                                            N_stations_to_pred, 0);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("y", "N_years", N_years);
      current_statement__ = 100;
      stan::math::validate_non_negative_index("y", "N_weeks", N_weeks);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("y", "N_stations", N_stations);
      current_statement__ = 102;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N_years),
            static_cast<size_t>(N_weeks), static_cast<size_t>(N_stations)});
      y = 
        std::vector<std::vector<std::vector<double>>>(N_years, 
          std::vector<std::vector<double>>(N_weeks, 
            std::vector<double>(N_stations, 
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 102;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 102;
        pos__ = 1;
        current_statement__ = 102;
        for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
          current_statement__ = 102;
          for (int sym2__ = 1; sym2__ <= N_weeks; ++sym2__) {
            current_statement__ = 102;
            for (int sym3__ = 1; sym3__ <= N_years; ++sym3__) {
              current_statement__ = 102;
              stan::model::assign(y, y_flat__[(pos__ - 1)],
                "assigning variable y", stan::model::index_uni(sym3__),
                                          stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
              current_statement__ = 102;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 103;
      stan::math::validate_non_negative_index("delta", "N_years", N_years);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("delta", "N_weeks", N_weeks);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("delta", "N_stations",
                                              N_stations);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("delta", "N_covariates",
                                              N_covariates);
      current_statement__ = 107;
      context__.validate_dims("data initialization","delta","double",
           std::vector<size_t>{static_cast<size_t>(N_years),
            static_cast<size_t>(N_weeks), static_cast<size_t>(N_stations),
            static_cast<size_t>(N_covariates)});
      delta = 
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(N_years, 
          std::vector<Eigen::Matrix<double, -1, -1>>(N_weeks, 
            Eigen::Matrix<double, -1, -1>::Constant(N_stations, N_covariates,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 107;
        delta_flat__ = context__.vals_r("delta");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= N_covariates; ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            current_statement__ = 107;
            for (int sym3__ = 1; sym3__ <= N_weeks; ++sym3__) {
              current_statement__ = 107;
              for (int sym4__ = 1; sym4__ <= N_years; ++sym4__) {
                current_statement__ = 107;
                stan::model::assign(delta, delta_flat__[(pos__ - 1)],
                  "assigning variable delta", stan::model::index_uni(sym4__),
                                                stan::model::index_uni(sym3__),
                                                stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
                current_statement__ = 107;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 108;
      stan::math::validate_non_negative_index("dist", "N_stations",
                                              N_stations);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("dist", "N_stations",
                                              N_stations);
      current_statement__ = 110;
      context__.validate_dims("data initialization","dist","double",
           std::vector<size_t>{static_cast<size_t>(N_stations),
            static_cast<size_t>(N_stations)});
      dist_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N_stations, N_stations,
          std::numeric_limits<double>::quiet_NaN());
      new (&dist) Eigen::Map<Eigen::Matrix<double, -1, -1>>(dist_data__.data(), N_stations, N_stations);
        
      
      {
        std::vector<local_scalar_t__> dist_flat__;
        current_statement__ = 110;
        dist_flat__ = context__.vals_r("dist");
        current_statement__ = 110;
        pos__ = 1;
        current_statement__ = 110;
        for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
          current_statement__ = 110;
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            current_statement__ = 110;
            stan::model::assign(dist, dist_flat__[(pos__ - 1)],
              "assigning variable dist", stan::model::index_uni(sym2__),
                                           stan::model::index_uni(sym1__));
            current_statement__ = 110;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 111;
      stan::math::validate_non_negative_index("dist_pred",
                                              "N_stations_to_pred",
                                              N_stations_to_pred);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("dist_pred", "N_stations",
                                              N_stations);
      current_statement__ = 113;
      context__.validate_dims("data initialization","dist_pred","double",
           std::vector<size_t>{static_cast<size_t>(N_stations_to_pred),
            static_cast<size_t>(N_stations)});
      dist_pred_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N_stations_to_pred,
          N_stations, std::numeric_limits<double>::quiet_NaN());
      new (&dist_pred) Eigen::Map<Eigen::Matrix<double, -1, -1>>(dist_pred_data__.data(), N_stations_to_pred, N_stations);
        
      
      {
        std::vector<local_scalar_t__> dist_pred_flat__;
        current_statement__ = 113;
        dist_pred_flat__ = context__.vals_r("dist_pred");
        current_statement__ = 113;
        pos__ = 1;
        current_statement__ = 113;
        for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
          current_statement__ = 113;
          for (int sym2__ = 1; sym2__ <= N_stations_to_pred; ++sym2__) {
            current_statement__ = 113;
            stan::model::assign(dist_pred, dist_pred_flat__[(pos__ - 1)],
              "assigning variable dist_pred", stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
            current_statement__ = 113;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 114;
      stan::math::validate_non_negative_index("dist_pred_to_pred",
                                              "N_stations_to_pred",
                                              N_stations_to_pred);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("dist_pred_to_pred",
                                              "N_stations_to_pred",
                                              N_stations_to_pred);
      current_statement__ = 116;
      context__.validate_dims("data initialization","dist_pred_to_pred",
          "double",
           std::vector<size_t>{static_cast<size_t>(N_stations_to_pred),
            static_cast<size_t>(N_stations_to_pred)});
      dist_pred_to_pred_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N_stations_to_pred,
          N_stations_to_pred, std::numeric_limits<double>::quiet_NaN());
      new (&dist_pred_to_pred) Eigen::Map<Eigen::Matrix<double, -1, -1>>(dist_pred_to_pred_data__.data(), N_stations_to_pred, N_stations_to_pred);
        
      
      {
        std::vector<local_scalar_t__> dist_pred_to_pred_flat__;
        current_statement__ = 116;
        dist_pred_to_pred_flat__ = context__.vals_r("dist_pred_to_pred");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= N_stations_to_pred; ++sym1__) {
          current_statement__ = 116;
          for (int sym2__ = 1; sym2__ <= N_stations_to_pred; ++sym2__) {
            current_statement__ = 116;
            stan::model::assign(dist_pred_to_pred,
              dist_pred_to_pred_flat__[(pos__ - 1)],
              "assigning variable dist_pred_to_pred", stan::model::index_uni(sym2__),
                                                        stan::model::index_uni(sym1__));
            current_statement__ = 116;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 117;
      stan::math::validate_non_negative_index("weeks_to_pred",
                                              "N_weeks_to_pred",
                                              N_weeks_to_pred);
      current_statement__ = 118;
      context__.validate_dims("data initialization","weeks_to_pred","double",
           std::vector<size_t>{static_cast<size_t>(N_weeks_to_pred)});
      weeks_to_pred_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N_weeks_to_pred,
          std::numeric_limits<double>::quiet_NaN());
      new (&weeks_to_pred) Eigen::Map<Eigen::Matrix<double, -1, 1>>(weeks_to_pred_data__.data(), N_weeks_to_pred);
        
      
      {
        std::vector<local_scalar_t__> weeks_to_pred_flat__;
        current_statement__ = 118;
        weeks_to_pred_flat__ = context__.vals_r("weeks_to_pred");
        current_statement__ = 118;
        pos__ = 1;
        current_statement__ = 118;
        for (int sym1__ = 1; sym1__ <= N_weeks_to_pred; ++sym1__) {
          current_statement__ = 118;
          stan::model::assign(weeks_to_pred,
            weeks_to_pred_flat__[(pos__ - 1)],
            "assigning variable weeks_to_pred", stan::model::index_uni(sym1__));
          current_statement__ = 118;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 119;
      stan::math::validate_non_negative_index("delta_pred_sim_t",
                                              "N_years_to_pred",
                                              N_years_to_pred);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("delta_pred_sim_t",
                                              "to_int(max(weeks_to_pred))",
                                              stan::math::to_int(
                                                stan::math::max(
                                                  weeks_to_pred)));
      current_statement__ = 121;
      stan::math::validate_non_negative_index("delta_pred_sim_t",
                                              "N_stations", N_stations);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("delta_pred_sim_t",
                                              "N_covariates", N_covariates);
      current_statement__ = 123;
      context__.validate_dims("data initialization","delta_pred_sim_t",
          "double",
           std::vector<size_t>{static_cast<size_t>(N_years_to_pred),
            static_cast<size_t>(stan::math::to_int(
                                  stan::math::max(weeks_to_pred))),
            static_cast<size_t>(N_stations),
            static_cast<size_t>(N_covariates)});
      delta_pred_sim_t = 
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(
          N_years_to_pred, 
          std::vector<Eigen::Matrix<double, -1, -1>>(
            stan::math::to_int(stan::math::max(weeks_to_pred)), 
            Eigen::Matrix<double, -1, -1>::Constant(N_stations, N_covariates,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> delta_pred_sim_t_flat__;
        current_statement__ = 123;
        delta_pred_sim_t_flat__ = context__.vals_r("delta_pred_sim_t");
        current_statement__ = 123;
        pos__ = 1;
        current_statement__ = 123;
        for (int sym1__ = 1; sym1__ <= N_covariates; ++sym1__) {
          current_statement__ = 123;
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            current_statement__ = 123;
            for (int sym3__ = 1;
                 sym3__ <= stan::math::to_int(stan::math::max(weeks_to_pred));
                 ++sym3__) {
              current_statement__ = 123;
              for (int sym4__ = 1; sym4__ <= N_years_to_pred; ++sym4__) {
                current_statement__ = 123;
                stan::model::assign(delta_pred_sim_t,
                  delta_pred_sim_t_flat__[(pos__ - 1)],
                  "assigning variable delta_pred_sim_t", stan::model::index_uni(sym4__),
                                                           stan::model::index_uni(sym3__),
                                                           stan::model::index_uni(sym2__),
                                                           stan::model::index_uni(sym1__));
                current_statement__ = 123;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 124;
      stan::math::validate_non_negative_index("delta_pred_sim_s_t",
                                              "N_years_to_pred",
                                              N_years_to_pred);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("delta_pred_sim_s_t",
                                              "to_int(max(weeks_to_pred))",
                                              stan::math::to_int(
                                                stan::math::max(
                                                  weeks_to_pred)));
      current_statement__ = 126;
      stan::math::validate_non_negative_index("delta_pred_sim_s_t",
                                              "N_stations_to_pred",
                                              N_stations_to_pred);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("delta_pred_sim_s_t",
                                              "N_covariates", N_covariates);
      current_statement__ = 128;
      context__.validate_dims("data initialization","delta_pred_sim_s_t",
          "double",
           std::vector<size_t>{static_cast<size_t>(N_years_to_pred),
            static_cast<size_t>(stan::math::to_int(
                                  stan::math::max(weeks_to_pred))),
            static_cast<size_t>(N_stations_to_pred),
            static_cast<size_t>(N_covariates)});
      delta_pred_sim_s_t = 
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(
          N_years_to_pred, 
          std::vector<Eigen::Matrix<double, -1, -1>>(
            stan::math::to_int(stan::math::max(weeks_to_pred)), 
            Eigen::Matrix<double, -1, -1>::Constant(N_stations_to_pred,
              N_covariates, std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> delta_pred_sim_s_t_flat__;
        current_statement__ = 128;
        delta_pred_sim_s_t_flat__ = context__.vals_r("delta_pred_sim_s_t");
        current_statement__ = 128;
        pos__ = 1;
        current_statement__ = 128;
        for (int sym1__ = 1; sym1__ <= N_covariates; ++sym1__) {
          current_statement__ = 128;
          for (int sym2__ = 1; sym2__ <= N_stations_to_pred; ++sym2__) {
            current_statement__ = 128;
            for (int sym3__ = 1;
                 sym3__ <= stan::math::to_int(stan::math::max(weeks_to_pred));
                 ++sym3__) {
              current_statement__ = 128;
              for (int sym4__ = 1; sym4__ <= N_years_to_pred; ++sym4__) {
                current_statement__ = 128;
                stan::model::assign(delta_pred_sim_s_t,
                  delta_pred_sim_s_t_flat__[(pos__ - 1)],
                  "assigning variable delta_pred_sim_s_t", stan::model::index_uni(sym4__),
                                                             stan::model::index_uni(sym3__),
                                                             stan::model::index_uni(sym2__),
                                                             stan::model::index_uni(sym1__));
                current_statement__ = 128;
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 129;
      context__.validate_dims("data initialization","a","double",
           std::vector<size_t>{});
      a = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 129;
      a = context__.vals_r("a")[(1 - 1)];
      current_statement__ = 129;
      stan::math::check_greater_or_equal(function__, "a", a, 0);
      current_statement__ = 130;
      context__.validate_dims("data initialization","b","double",
           std::vector<size_t>{});
      b = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 130;
      b = context__.vals_r("b")[(1 - 1)];
      current_statement__ = 130;
      stan::math::check_greater_or_equal(function__, "b", b, 0);
      current_statement__ = 131;
      context__.validate_dims("data initialization","s0","double",
           std::vector<size_t>{});
      s0 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 131;
      s0 = context__.vals_r("s0")[(1 - 1)];
      current_statement__ = 131;
      stan::math::check_greater_or_equal(function__, "s0", s0, 0);
      current_statement__ = 132;
      context__.validate_dims("data initialization","phi_gamma_esti",
          "double", std::vector<size_t>{});
      phi_gamma_esti = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 132;
      phi_gamma_esti = context__.vals_r("phi_gamma_esti")[(1 - 1)];
      current_statement__ = 132;
      stan::math::check_greater_or_equal(function__, "phi_gamma_esti",
                                            phi_gamma_esti, 0);
      current_statement__ = 133;
      context__.validate_dims("data initialization","phi_eta_esti","double",
           std::vector<size_t>{});
      phi_eta_esti = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 133;
      phi_eta_esti = context__.vals_r("phi_eta_esti")[(1 - 1)];
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "phi_eta_esti",
                                            phi_eta_esti, 0);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("xi", "N_years", N_years);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("beta", "N_covariates",
                                              N_covariates);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("eta", "N_years", N_years);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("eta", "N_weeks", N_weeks);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("eta", "N_stations", N_stations);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("mu", "N_years", N_years);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("gamma", "N_years", N_years);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("gamma", "N_stations",
                                              N_stations);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("Sigma_eta", "N_stations",
                                              N_stations);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("Sigma_eta", "N_stations",
                                              N_stations);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("Sigma_gamma", "N_stations",
                                              N_stations);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("Sigma_gamma", "N_stations",
                                              N_stations);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("zero", "N_stations",
                                              N_stations);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("gamma_pred_sim",
                                              "N_years_to_pred",
                                              N_years_to_pred);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("gamma_pred_sim",
                                              "N_stations_to_pred",
                                              N_stations_to_pred);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("o_pred_sim_t",
                                              "N_years_to_pred",
                                              N_years_to_pred);
      current_statement__ = 150;
      o_pred_sim_t_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 150;
      o_pred_sim_t_2dim__ = stan::math::to_int(
                              stan::math::max(weeks_to_pred));
      current_statement__ = 150;
      stan::math::validate_non_negative_index("o_pred_sim_t",
                                              "to_int(max(weeks_to_pred))",
                                              o_pred_sim_t_2dim__);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("o_pred_sim_t", "N_stations",
                                              N_stations);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("o_pred_sim_s_t",
                                              "N_years_to_pred",
                                              N_years_to_pred);
      current_statement__ = 153;
      o_pred_sim_s_t_2dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 153;
      o_pred_sim_s_t_2dim__ = stan::math::to_int(
                                stan::math::max(weeks_to_pred));
      current_statement__ = 153;
      stan::math::validate_non_negative_index("o_pred_sim_s_t",
                                              "to_int(max(weeks_to_pred))",
                                              o_pred_sim_s_t_2dim__);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("o_pred_sim_s_t",
                                              "N_stations_to_pred",
                                              N_stations_to_pred);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("y_pred_sim",
                                              "N_years_to_pred",
                                              N_years_to_pred);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("y_pred_sim",
                                              "N_weeks_to_pred",
                                              N_weeks_to_pred);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("y_pred_sim",
                                              "N_stations_to_pred",
                                              N_stations_to_pred);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("Sigma_gamma_12",
                                              "N_stations_to_pred",
                                              N_stations_to_pred);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("Sigma_gamma_12", "N_stations",
                                              N_stations);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("Sigma_eta_12",
                                              "N_stations_to_pred",
                                              N_stations_to_pred);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("Sigma_eta_12", "N_stations",
                                              N_stations);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("Sigma_gamma_inv",
                                              "N_stations", N_stations);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("Sigma_gamma_inv",
                                              "N_stations", N_stations);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("Sigma_eta_inv", "N_stations",
                                              N_stations);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("Sigma_eta_inv", "N_stations",
                                              N_stations);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + N_years + N_covariates
       + (N_years * N_weeks * N_stations) + N_years + (N_years * N_stations)
       + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "spt_lm_no_delta_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 1;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      std::vector<local_scalar_t__> xi =
         std::vector<local_scalar_t__>(N_years, DUMMY_VAR__);
      current_statement__ = 2;
      xi = in__.template read<std::vector<local_scalar_t__>>(N_years);
      std::vector<local_scalar_t__> beta =
         std::vector<local_scalar_t__>(N_covariates, DUMMY_VAR__);
      current_statement__ = 3;
      beta = in__.template read<std::vector<local_scalar_t__>>(N_covariates);
      std::vector<std::vector<std::vector<local_scalar_t__>>> eta =
         std::vector<std::vector<std::vector<local_scalar_t__>>>(N_years, 
           std::vector<std::vector<local_scalar_t__>>(N_weeks, 
             std::vector<local_scalar_t__>(N_stations, DUMMY_VAR__)));
      current_statement__ = 4;
      eta = in__.template read<
              std::vector<std::vector<std::vector<local_scalar_t__>>>>(
              N_years, N_weeks, N_stations);
      std::vector<local_scalar_t__> mu =
         std::vector<local_scalar_t__>(N_years, DUMMY_VAR__);
      current_statement__ = 5;
      mu = in__.template read<std::vector<local_scalar_t__>>(N_years);
      std::vector<std::vector<local_scalar_t__>> gamma =
         std::vector<std::vector<local_scalar_t__>>(N_years, 
           std::vector<local_scalar_t__>(N_stations, DUMMY_VAR__));
      current_statement__ = 6;
      gamma = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
                N_years, N_stations);
      local_scalar_t__ tau_eta = DUMMY_VAR__;
      current_statement__ = 7;
      tau_eta = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ tau_gamma = DUMMY_VAR__;
      current_statement__ = 8;
      tau_gamma = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      local_scalar_t__ tau_epsilon = DUMMY_VAR__;
      current_statement__ = 9;
      tau_epsilon = in__.template read_constrain_lb<local_scalar_t__, 
                      jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> Sigma_eta =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_stations,
           N_stations, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, -1> Sigma_gamma =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(N_stations,
           N_stations, DUMMY_VAR__);
      current_statement__ = 17;
      for (int i = 1; i <= N_stations; ++i) {
        current_statement__ = 15;
        for (int j = 1; j <= N_stations; ++j) {
          current_statement__ = 12;
          stan::model::assign(Sigma_eta,
            ((1 / tau_eta) *
              stan::math::exp(
                (-phi_eta_esti *
                  stan::model::rvalue(dist, "dist",
                    stan::model::index_uni(i), stan::model::index_uni(j))))),
            "assigning variable Sigma_eta", stan::model::index_uni(i),
                                              stan::model::index_uni(j));
          current_statement__ = 13;
          stan::model::assign(Sigma_gamma,
            ((1 / tau_gamma) *
              stan::math::exp(
                (-phi_gamma_esti *
                  stan::model::rvalue(dist, "dist",
                    stan::model::index_uni(i), stan::model::index_uni(j))))),
            "assigning variable Sigma_gamma", stan::model::index_uni(i),
                                                stan::model::index_uni(j));
        }
      }
      {
        current_statement__ = 69;
        stan::math::validate_non_negative_index("zero", "N_stations",
                                                N_stations);
        Eigen::Matrix<local_scalar_t__, -1, 1> zero =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_stations,
             DUMMY_VAR__);
        current_statement__ = 70;
        stan::model::assign(zero, stan::math::rep_vector(0, N_stations),
          "assigning variable zero");
        current_statement__ = 71;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(rho, 0, 1));
        current_statement__ = 72;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(xi, 0, s0));
        current_statement__ = 73;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, s0));
        current_statement__ = 74;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(tau_eta, a, b));
        current_statement__ = 75;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(tau_gamma, a, b));
        current_statement__ = 76;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(tau_epsilon, a, b));
        current_statement__ = 77;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, s0));
        current_statement__ = 82;
        for (int i = 1; i <= N_years; ++i) {
          current_statement__ = 80;
          for (int j = 1; j <= N_weeks; ++j) {
            current_statement__ = 78;
            lp_accum__.add(
              stan::math::multi_normal_lpdf<propto__>(
                stan::math::to_vector(
                  stan::model::rvalue(
                    stan::model::rvalue(eta, "eta", stan::model::index_uni(i)),
                    "eta[i]", stan::model::index_uni(j))), zero, Sigma_eta));
          }
        }
        current_statement__ = 85;
        for (int i = 1; i <= N_years; ++i) {
          current_statement__ = 83;
          lp_accum__.add(
            stan::math::multi_normal_lpdf<propto__>(
              stan::math::to_vector(
                stan::model::rvalue(gamma, "gamma",
                  stan::model::index_uni(i))), zero, Sigma_gamma));
        }
        current_statement__ = 91;
        for (int i = 1; i <= N_years; ++i) {
          current_statement__ = 86;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                "y[i]", stan::model::index_uni(1)),
              stan::math::add(
                stan::math::rep_vector(
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
                  N_stations),
                stan::math::to_vector(
                  stan::model::rvalue(gamma, "gamma",
                    stan::model::index_uni(i)))), (1 / tau_epsilon)));
          current_statement__ = 89;
          for (int j = 2; j <= N_weeks; ++j) {
            current_statement__ = 87;
            lp_accum__.add(
              stan::math::normal_lpdf<propto__>(
                stan::model::rvalue(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  "y[i]", stan::model::index_uni(j)),
                stan::math::add(
                  stan::math::add(
                    stan::math::add(
                      stan::math::multiply(rho,
                        stan::math::to_vector(
                          stan::model::rvalue(
                            stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                            "y[i]", stan::model::index_uni((j - 1))))),
                      stan::math::rep_vector(
                        stan::model::rvalue(xi, "xi",
                          stan::model::index_uni(i)), N_stations)),
                    stan::math::multiply(
                      stan::model::rvalue(
                        stan::model::rvalue(delta, "delta", stan::model::index_uni(i)),
                        "delta[i]", stan::model::index_uni(j)),
                      stan::math::to_vector(beta))),
                  stan::math::to_vector(
                    stan::model::rvalue(
                      stan::model::rvalue(eta, "eta", stan::model::index_uni(i)),
                      "eta[i]", stan::model::index_uni(j)))),
                (1 / tau_epsilon)));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "spt_lm_no_delta_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      std::vector<double> xi =
         std::vector<double>(N_years, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      xi = in__.template read<std::vector<local_scalar_t__>>(N_years);
      std::vector<double> beta =
         std::vector<double>(N_covariates, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      beta = in__.template read<std::vector<local_scalar_t__>>(N_covariates);
      std::vector<std::vector<std::vector<double>>> eta =
         std::vector<std::vector<std::vector<double>>>(N_years, 
           std::vector<std::vector<double>>(N_weeks, 
             std::vector<double>(N_stations, 
               std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 4;
      eta = in__.template read<
              std::vector<std::vector<std::vector<local_scalar_t__>>>>(
              N_years, N_weeks, N_stations);
      std::vector<double> mu =
         std::vector<double>(N_years, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      mu = in__.template read<std::vector<local_scalar_t__>>(N_years);
      std::vector<std::vector<double>> gamma =
         std::vector<std::vector<double>>(N_years, 
           std::vector<double>(N_stations, 
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      gamma = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
                N_years, N_stations);
      double tau_eta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      tau_eta = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double tau_gamma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      tau_gamma = in__.template read_constrain_lb<local_scalar_t__, 
                    jacobian__>(0, lp__);
      double tau_epsilon = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      tau_epsilon = in__.template read_constrain_lb<local_scalar_t__, 
                      jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, -1> Sigma_eta =
         Eigen::Matrix<double, -1, -1>::Constant(N_stations, N_stations,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, -1> Sigma_gamma =
         Eigen::Matrix<double, -1, -1>::Constant(N_stations, N_stations,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(rho);
      out__.write(xi);
      out__.write(beta);
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_weeks; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N_years; ++sym3__) {
            out__.write(eta[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      out__.write(mu);
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_years; ++sym2__) {
          out__.write(gamma[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(tau_eta);
      out__.write(tau_gamma);
      out__.write(tau_epsilon);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 17;
      for (int i = 1; i <= N_stations; ++i) {
        current_statement__ = 15;
        for (int j = 1; j <= N_stations; ++j) {
          current_statement__ = 12;
          stan::model::assign(Sigma_eta,
            ((1 / tau_eta) *
              stan::math::exp(
                (-phi_eta_esti *
                  stan::model::rvalue(dist, "dist",
                    stan::model::index_uni(i), stan::model::index_uni(j))))),
            "assigning variable Sigma_eta", stan::model::index_uni(i),
                                              stan::model::index_uni(j));
          current_statement__ = 13;
          stan::model::assign(Sigma_gamma,
            ((1 / tau_gamma) *
              stan::math::exp(
                (-phi_gamma_esti *
                  stan::model::rvalue(dist, "dist",
                    stan::model::index_uni(i), stan::model::index_uni(j))))),
            "assigning variable Sigma_gamma", stan::model::index_uni(i),
                                                stan::model::index_uni(j));
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(Sigma_eta);
        out__.write(Sigma_gamma);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> zero =
         Eigen::Matrix<double, -1, 1>::Constant(N_stations,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      stan::model::assign(zero, stan::math::rep_vector(0, N_stations),
        "assigning variable zero");
      std::vector<std::vector<double>> gamma_pred_sim =
         std::vector<std::vector<double>>(N_years_to_pred, 
           std::vector<double>(N_stations_to_pred, 
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<std::vector<double>>> o_pred_sim_t =
         std::vector<std::vector<std::vector<double>>>(N_years_to_pred, 
           std::vector<std::vector<double>>(o_pred_sim_t_2dim__, 
             std::vector<double>(N_stations, 
               std::numeric_limits<double>::quiet_NaN())));
      std::vector<std::vector<std::vector<double>>> o_pred_sim_s_t =
         std::vector<std::vector<std::vector<double>>>(N_years_to_pred, 
           std::vector<std::vector<double>>(o_pred_sim_s_t_2dim__, 
             std::vector<double>(N_stations_to_pred, 
               std::numeric_limits<double>::quiet_NaN())));
      std::vector<std::vector<std::vector<double>>> y_pred_sim =
         std::vector<std::vector<std::vector<double>>>(N_years_to_pred, 
           std::vector<std::vector<double>>(N_weeks_to_pred, 
             std::vector<double>(N_stations_to_pred, 
               std::numeric_limits<double>::quiet_NaN())));
      Eigen::Matrix<double, -1, -1> Sigma_gamma_12 =
         Eigen::Matrix<double, -1, -1>::Constant(N_stations_to_pred,
           N_stations, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 28;
      for (int i = 1; i <= N_stations_to_pred; ++i) {
        current_statement__ = 26;
        for (int j = 1; j <= N_stations; ++j) {
          current_statement__ = 24;
          stan::model::assign(Sigma_gamma_12,
            stan::math::exp(
              (-phi_gamma_esti *
                stan::model::rvalue(
                  stan::model::rvalue(dist_pred, "dist_pred", stan::model::index_uni(i)),
                  "dist_pred[i]", stan::model::index_uni(j)))),
            "assigning variable Sigma_gamma_12", stan::model::index_uni(i),
                                                   stan::model::index_uni(j));
        }
      }
      Eigen::Matrix<double, -1, -1> Sigma_eta_12 =
         Eigen::Matrix<double, -1, -1>::Constant(N_stations_to_pred,
           N_stations, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 34;
      for (int i = 1; i <= N_stations_to_pred; ++i) {
        current_statement__ = 32;
        for (int j = 1; j <= N_stations; ++j) {
          current_statement__ = 30;
          stan::model::assign(Sigma_eta_12,
            stan::math::exp(
              (-phi_eta_esti *
                stan::model::rvalue(
                  stan::model::rvalue(dist_pred, "dist_pred", stan::model::index_uni(i)),
                  "dist_pred[i]", stan::model::index_uni(j)))),
            "assigning variable Sigma_eta_12", stan::model::index_uni(i),
                                                 stan::model::index_uni(j));
        }
      }
      Eigen::Matrix<double, -1, -1> Sigma_gamma_inv =
         Eigen::Matrix<double, -1, -1>::Constant(N_stations, N_stations,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 36;
      stan::model::assign(Sigma_gamma_inv, stan::math::inverse(Sigma_gamma),
        "assigning variable Sigma_gamma_inv");
      Eigen::Matrix<double, -1, -1> Sigma_eta_inv =
         Eigen::Matrix<double, -1, -1>::Constant(N_stations, N_stations,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 38;
      stan::model::assign(Sigma_eta_inv, stan::math::inverse(Sigma_eta),
        "assigning variable Sigma_eta_inv");
      current_statement__ = 43;
      for (int i = 1; i <= N_years_to_pred; ++i) {
        current_statement__ = 41;
        for (int j = 1; j <= N_stations_to_pred; ++j) {
          current_statement__ = 39;
          stan::model::assign(gamma_pred_sim,
            stan::math::normal_rng(
              stan::math::multiply(
                stan::math::multiply(
                  stan::model::rvalue(Sigma_gamma_12, "Sigma_gamma_12",
                    stan::model::index_uni(i), stan::model::index_omni()),
                  Sigma_gamma_inv),
                stan::math::to_vector(
                  stan::model::rvalue(gamma, "gamma",
                    stan::model::index_uni(i)))),
              ((1 / tau_gamma) *
                (1 -
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::model::rvalue(Sigma_gamma_12, "Sigma_gamma_12",
                        stan::model::index_uni(i), stan::model::index_omni()),
                      Sigma_gamma_inv),
                    stan::math::transpose(
                      stan::model::rvalue(Sigma_gamma_12, "Sigma_gamma_12",
                        stan::model::index_uni(i), stan::model::index_omni()))))),
              base_rng__),
            "assigning variable gamma_pred_sim", stan::model::index_uni(i),
                                                   stan::model::index_uni(j));
        }
      }
      current_statement__ = 49;
      for (int i = 1; i <= N_years_to_pred; ++i) {
        current_statement__ = 44;
        stan::model::assign(o_pred_sim_t,
          stan::math::to_array_1d(
            stan::math::add(
              stan::math::to_vector(
                stan::model::rvalue(gamma, "gamma",
                  stan::model::index_uni(i))),
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))),
          "assigning variable o_pred_sim_t", stan::model::index_uni(i),
                                               stan::model::index_uni(1));
        current_statement__ = 47;
        for (int j = 2;
             j <= stan::math::to_int(stan::math::max(weeks_to_pred)); ++j) {
          current_statement__ = 45;
          stan::model::assign(o_pred_sim_t,
            stan::math::to_array_1d(
              stan::math::multi_normal_rng(
                stan::math::add(
                  stan::math::add(
                    stan::model::rvalue(xi, "xi", stan::model::index_uni(i)),
                    stan::math::multiply(rho,
                      stan::math::to_vector(
                        stan::model::rvalue(
                          stan::model::deep_copy(
  stan::model::rvalue(o_pred_sim_t, "o_pred_sim_t",
    stan::model::index_uni(i))),
                          "FnDeepCopy__(o_pred_sim_t[i])",
                          stan::model::index_uni((j - 1)))))),
                  stan::math::multiply(
                    stan::model::rvalue(
                      stan::model::rvalue(delta_pred_sim_t, "delta_pred_sim_t",
  stan::model::index_uni(i)),
                      "delta_pred_sim_t[i]", stan::model::index_uni(j)),
                    stan::math::to_vector(beta))),
                stan::math::multiply((1 / tau_eta), Sigma_eta), base_rng__)),
            "assigning variable o_pred_sim_t", stan::model::index_uni(i),
                                                 stan::model::index_uni(j));
        }
      }
      current_statement__ = 61;
      for (int i = 1; i <= N_years_to_pred; ++i) {
        current_statement__ = 59;
        for (int j = 1; j <= N_stations_to_pred; ++j) {
          current_statement__ = 50;
          stan::model::assign(o_pred_sim_s_t,
            (stan::model::rvalue(gamma_pred_sim, "gamma_pred_sim",
               stan::model::index_uni(i), stan::model::index_uni(j)) +
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
            "assigning variable o_pred_sim_s_t", stan::model::index_uni(i),
                                                   stan::model::index_uni(1),
                                                   stan::model::index_uni(j));
          current_statement__ = 57;
          for (int t = 2;
               t <= stan::math::to_int(stan::math::max(weeks_to_pred)); ++t) {
            double G_delta = std::numeric_limits<double>::quiet_NaN();
            current_statement__ = 51;
            G_delta = ((1 / tau_eta) *
                        (1 -
                          stan::math::multiply(
                            stan::math::multiply(
                              stan::model::rvalue(Sigma_eta_12,
                                "Sigma_eta_12",
                                stan::model::index_uni(j),
                                  stan::model::index_omni()), Sigma_eta_inv),
                            stan::math::transpose(
                              stan::model::rvalue(Sigma_eta_12,
                                "Sigma_eta_12",
                                stan::model::index_uni(j),
                                  stan::model::index_omni())))));
            double arg_1 = std::numeric_limits<double>::quiet_NaN();
            current_statement__ = 52;
            arg_1 = ((stan::model::rvalue(xi, "xi",
                        stan::model::index_uni(i)) +
                       (rho *
                         stan::model::rvalue(
                           stan::model::rvalue(
  stan::model::rvalue(o_pred_sim_s_t, "o_pred_sim_s_t",
  stan::model::index_uni(i)),
  "o_pred_sim_s_t[i]", stan::model::index_uni((t - 1))),
                           "o_pred_sim_s_t[i][(t - 1)]",
                           stan::model::index_uni(j)))) +
                      stan::math::multiply(
                        stan::model::rvalue(
                          stan::model::rvalue(
  stan::model::rvalue(delta_pred_sim_s_t, "delta_pred_sim_s_t",
  stan::model::index_uni(i)),
  "delta_pred_sim_s_t[i]", stan::model::index_uni(t)),
                          "delta_pred_sim_s_t[i][t]",
                          stan::model::index_uni(j)),
                        stan::math::to_vector(beta)));
            double arg_2 = std::numeric_limits<double>::quiet_NaN();
            current_statement__ = 53;
            arg_2 = stan::math::multiply(
                      stan::math::multiply(
                        stan::model::rvalue(Sigma_eta_12, "Sigma_eta_12",
                          stan::model::index_uni(j),
                            stan::model::index_omni()), Sigma_eta_inv),
                      stan::math::subtract(
                        stan::math::subtract(
                          stan::math::subtract(
                            stan::math::to_vector(
                              stan::model::rvalue(
                                stan::model::rvalue(o_pred_sim_t, "o_pred_sim_t", stan::model::index_uni(i)),
                                "o_pred_sim_t[i]", stan::model::index_uni(j))),
                            stan::model::rvalue(xi, "xi",
                              stan::model::index_uni(i))),
                          stan::math::multiply(rho,
                            stan::math::to_vector(
                              stan::model::rvalue(
                                stan::model::rvalue(o_pred_sim_t, "o_pred_sim_t", stan::model::index_uni(i)),
                                "o_pred_sim_t[i]",
                                stan::model::index_uni((t - 1)))))),
                        stan::math::multiply(
                          stan::model::rvalue(
                            stan::model::rvalue(delta_pred_sim_t, "delta_pred_sim_t",
  stan::model::index_uni(i)),
                            "delta_pred_sim_t[i]", stan::model::index_uni(j)),
                          stan::math::to_vector(beta))));
            double zeta = std::numeric_limits<double>::quiet_NaN();
            current_statement__ = 54;
            zeta = (arg_1 + arg_2);
            current_statement__ = 55;
            stan::model::assign(o_pred_sim_s_t,
              stan::math::normal_rng(zeta, stan::math::abs(G_delta),
                base_rng__),
              "assigning variable o_pred_sim_s_t", stan::model::index_uni(i),
                                                     stan::model::index_uni(t),
                                                     stan::model::index_uni(j));
          }
        }
      }
      current_statement__ = 68;
      for (int i = 1; i <= N_years_to_pred; ++i) {
        current_statement__ = 66;
        for (int j = 1; j <= N_weeks_to_pred; ++j) {
          current_statement__ = 64;
          for (int k = 1; k <= N_stations_to_pred; ++k) {
            current_statement__ = 62;
            stan::model::assign(y_pred_sim,
              stan::math::normal_rng(
                stan::model::rvalue(
                  stan::model::rvalue(
  stan::model::rvalue(o_pred_sim_s_t, "o_pred_sim_s_t",
  stan::model::index_uni(i)),
  "o_pred_sim_s_t[i]",
  stan::model::index_uni(stan::math::to_int(
                           stan::model::rvalue(weeks_to_pred,
                             "weeks_to_pred", stan::model::index_uni(j))))),
                  "o_pred_sim_s_t[i][to_int(weeks_to_pred[j])]",
                  stan::model::index_uni(k)), (1 / tau_epsilon), base_rng__),
              "assigning variable y_pred_sim", stan::model::index_uni(i),
                                                 stan::model::index_uni(j),
                                                 stan::model::index_uni(k));
          }
        }
      }
      out__.write(zero);
      for (int sym1__ = 1; sym1__ <= N_stations_to_pred; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_years_to_pred; ++sym2__) {
          out__.write(gamma_pred_sim[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= o_pred_sim_t_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N_years_to_pred; ++sym3__) {
            out__.write(
              o_pred_sim_t[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N_stations_to_pred; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= o_pred_sim_s_t_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N_years_to_pred; ++sym3__) {
            out__.write(
              o_pred_sim_s_t[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= N_stations_to_pred; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_weeks_to_pred; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N_years_to_pred; ++sym3__) {
            out__.write(
              y_pred_sim[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      out__.write(Sigma_gamma_12);
      out__.write(Sigma_eta_12);
      out__.write(Sigma_gamma_inv);
      out__.write(Sigma_eta_inv);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ rho = DUMMY_VAR__;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, rho);
      std::vector<local_scalar_t__> xi =
         std::vector<local_scalar_t__>(N_years, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
        xi[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(xi);
      std::vector<local_scalar_t__> beta =
         std::vector<local_scalar_t__>(N_covariates, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_covariates; ++sym1__) {
        beta[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(beta);
      std::vector<std::vector<std::vector<local_scalar_t__>>> eta =
         std::vector<std::vector<std::vector<local_scalar_t__>>>(N_years, 
           std::vector<std::vector<local_scalar_t__>>(N_weeks, 
             std::vector<local_scalar_t__>(N_stations, DUMMY_VAR__)));
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_weeks; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= N_years; ++sym3__) {
            eta[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)] = in__.read<
                                                              local_scalar_t__>();
          }
        }
      }
      out__.write(eta);
      std::vector<local_scalar_t__> mu =
         std::vector<local_scalar_t__>(N_years, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
        mu[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(mu);
      std::vector<std::vector<local_scalar_t__>> gamma =
         std::vector<std::vector<local_scalar_t__>>(N_years, 
           std::vector<local_scalar_t__>(N_stations, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_years; ++sym2__) {
          gamma[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write(gamma);
      local_scalar_t__ tau_eta = DUMMY_VAR__;
      tau_eta = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_eta);
      local_scalar_t__ tau_gamma = DUMMY_VAR__;
      tau_gamma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_gamma);
      local_scalar_t__ tau_epsilon = DUMMY_VAR__;
      tau_epsilon = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, tau_epsilon);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"rho", "xi", "beta", "eta", "mu",
      "gamma", "tau_eta", "tau_gamma", "tau_epsilon", "Sigma_eta",
      "Sigma_gamma", "zero", "gamma_pred_sim", "o_pred_sim_t",
      "o_pred_sim_s_t", "y_pred_sim", "Sigma_gamma_12", "Sigma_eta_12",
      "Sigma_gamma_inv", "Sigma_eta_inv"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_years)},
      std::vector<size_t>{static_cast<size_t>(N_covariates)},
      std::vector<size_t>{static_cast<size_t>(N_years),
                          static_cast<size_t>(N_weeks),
                          static_cast<size_t>(N_stations)},
      std::vector<size_t>{static_cast<size_t>(N_years)},
      std::vector<size_t>{static_cast<size_t>(N_years),
                          static_cast<size_t>(N_stations)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      },
      std::vector<size_t>{static_cast<size_t>(N_stations),
                          static_cast<size_t>(N_stations)},
      std::vector<size_t>{static_cast<size_t>(N_stations),
                          static_cast<size_t>(N_stations)},
      std::vector<size_t>{static_cast<size_t>(N_stations)},
      std::vector<size_t>{static_cast<size_t>(N_years_to_pred),
                          static_cast<size_t>(N_stations_to_pred)},
      std::vector<size_t>{static_cast<size_t>(N_years_to_pred),
                          static_cast<size_t>(o_pred_sim_t_2dim__),
                          static_cast<size_t>(N_stations)},
      std::vector<size_t>{static_cast<size_t>(N_years_to_pred),
                          static_cast<size_t>(o_pred_sim_s_t_2dim__),
                          static_cast<size_t>(N_stations_to_pred)},
      std::vector<size_t>{static_cast<size_t>(N_years_to_pred),
                          static_cast<size_t>(N_weeks_to_pred),
                          static_cast<size_t>(N_stations_to_pred)},
      std::vector<size_t>{static_cast<size_t>(N_stations_to_pred),
                          static_cast<size_t>(N_stations)},
      std::vector<size_t>{static_cast<size_t>(N_stations_to_pred),
                          static_cast<size_t>(N_stations)},
      std::vector<size_t>{static_cast<size_t>(N_stations),
                          static_cast<size_t>(N_stations)},
      std::vector<size_t>{static_cast<size_t>(N_stations),
                          static_cast<size_t>(N_stations)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "xi" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_covariates; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_weeks; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N_years; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_years; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "tau_eta");
    param_names__.emplace_back(std::string() + "tau_gamma");
    param_names__.emplace_back(std::string() + "tau_epsilon");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_eta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_gamma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "zero" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations_to_pred; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_years_to_pred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gamma_pred_sim" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= o_pred_sim_t_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N_years_to_pred; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "o_pred_sim_t" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations_to_pred; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= o_pred_sim_s_t_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N_years_to_pred; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "o_pred_sim_s_t" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations_to_pred; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_weeks_to_pred; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N_years_to_pred; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_pred_sim" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations_to_pred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_gamma_12" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations_to_pred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_eta_12" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_gamma_inv" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_eta_inv" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "xi" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_covariates; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_weeks; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= N_years; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_years; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "tau_eta");
    param_names__.emplace_back(std::string() + "tau_gamma");
    param_names__.emplace_back(std::string() + "tau_epsilon");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_eta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_gamma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "zero" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations_to_pred; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_years_to_pred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gamma_pred_sim" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= o_pred_sim_t_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N_years_to_pred; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "o_pred_sim_t" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations_to_pred; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= o_pred_sim_s_t_2dim__; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N_years_to_pred; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "o_pred_sim_s_t" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations_to_pred; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_weeks_to_pred; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N_years_to_pred; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "y_pred_sim" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations_to_pred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_gamma_12" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations_to_pred; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_eta_12" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_gamma_inv" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_stations; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_stations; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Sigma_eta_inv" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_covariates) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_weeks) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"tau_eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_epsilon\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Sigma_eta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_gamma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zero\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_stations) + "},\"block\":\"generated_quantities\"},{\"name\":\"gamma_pred_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years_to_pred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations_to_pred) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"o_pred_sim_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years_to_pred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(o_pred_sim_t_2dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"o_pred_sim_s_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years_to_pred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(o_pred_sim_s_t_2dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations_to_pred) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"y_pred_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years_to_pred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_weeks_to_pred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations_to_pred) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_gamma_12\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations_to_pred) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_eta_12\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations_to_pred) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_gamma_inv\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_eta_inv\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_covariates) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_weeks) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"tau_eta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_epsilon\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Sigma_eta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Sigma_gamma\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zero\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_stations) + "},\"block\":\"generated_quantities\"},{\"name\":\"gamma_pred_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years_to_pred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations_to_pred) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"o_pred_sim_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years_to_pred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(o_pred_sim_t_2dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"o_pred_sim_s_t\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years_to_pred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(o_pred_sim_s_t_2dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations_to_pred) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"y_pred_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_years_to_pred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_weeks_to_pred) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(N_stations_to_pred) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_gamma_12\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations_to_pred) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_eta_12\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations_to_pred) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_gamma_inv\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"generated_quantities\"},{\"name\":\"Sigma_eta_inv\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N_stations) + ",\"cols\":" + std::to_string(N_stations) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((1 + N_years) + N_covariates) + ((N_years * N_weeks) * N_stations))
        + N_years) + (N_years * N_stations)) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  ((N_stations * N_stations) + (N_stations * N_stations));
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((((N_stations + (N_years_to_pred * N_stations_to_pred)) +
          ((N_years_to_pred * o_pred_sim_t_2dim__) * N_stations)) +
         ((N_years_to_pred * o_pred_sim_s_t_2dim__) * N_stations_to_pred)) +
        ((N_years_to_pred * N_weeks_to_pred) * N_stations_to_pred)) +
       (N_stations_to_pred * N_stations)) +
      (N_stations_to_pred * N_stations)) + (N_stations * N_stations)) +
    (N_stations * N_stations));
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((1 + N_years) + N_covariates) + ((N_years * N_weeks) * N_stations))
        + N_years) + (N_years * N_stations)) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  ((N_stations * N_stations) + (N_stations * N_stations));
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((((((((N_stations + (N_years_to_pred * N_stations_to_pred)) +
          ((N_years_to_pred * o_pred_sim_t_2dim__) * N_stations)) +
         ((N_years_to_pred * o_pred_sim_s_t_2dim__) * N_stations_to_pred)) +
        ((N_years_to_pred * N_weeks_to_pred) * N_stations_to_pred)) +
       (N_stations_to_pred * N_stations)) +
      (N_stations_to_pred * N_stations)) + (N_stations * N_stations)) +
    (N_stations * N_stations));
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 9> names__{"rho", "xi", "beta", "eta",
      "mu", "gamma", "tau_eta", "tau_gamma", "tau_epsilon"};
      const std::array<Eigen::Index, 9> constrain_param_sizes__{1, N_years,
       N_covariates, (N_years * N_weeks * N_stations), N_years,
       (N_years * N_stations), 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = spt_lm_no_delta_model_namespace::spt_lm_no_delta_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return spt_lm_no_delta_model_namespace::profiles__;
}

#endif


